name: "Check Git Status"
description: "Fail the workflow or git push based if git status is not clean."
inputs:
  fail-if-not-clean:
    description: "Fail the workflow if git status is not clean."
    required: false
    default: true
  push-if-not-clean:
    description: "Commit the changes and push them to the origin if git status is not clean."
    required: false
    default: false
  request-changes-if-not-clean:
    description: "Request change when in the context of a Pull Request if git status is not clean."
    required: false
    default: true
  github-token:
    description: "GitHub token to use when pushing new changes."
    required: false
    default: ${{ github.token }}
    deprecationMessage: "Please use the push-token input instead."
  push-token:
    description: "GitHub token to use when pushing new changes."
    required: false
    default: ${{ github.token }}
  request-changes-token:
    description: "GitHub token to use when requesting changes in a Pull Request."
    required: false
    default: ${{ github.token }}
  commit-message:
    description: "The commit message to use when `push-if-not-clean` is `true` and there are changes."
    required: false
    default: "Changes detected by Check Git Status Action"
  request-changes-comment:
    description: "The comment to use when `request-changes-if-not-clean` is `true` and there are changes."
    required: false
    default: "Changes detected by Check Git Status Action"
  targets:
    description: "Files, directories, and/or globs to check and commit."
    required: false
    default: "."
outputs:
  status:
    description: "Is git status clean or dirty?"
    value: ${{ steps.git-status.outputs.status }}
runs:
  using: "composite"
  steps:
    - id: git-status
      name: git status
      shell: bash
      env:
        TARGETS: ${{ inputs.targets }}
      run: |
        echo '::group::git status'
        if git rev-parse --verify HEAD >/dev/null 2>&1
        then
          against=HEAD
        else
          # Initial commit: diff against an empty tree object
          against=$(git hash-object -t tree /dev/null)
        fi
        git add -N "$TARGETS"
        if test $(git diff --name-only $against | wc -l) != 0
        then
          echo "status=dirty" >> $GITHUB_OUTPUT
          echo "::notice::Git status is dirty"
          git diff --name-only $against | xargs -n1 -I {} echo "::notice file={}::  File: {}"
        else
          echo "status=clean" >> $GITHUB_OUTPUT
          echo "::notice::Git status is clean"
        fi
        echo '::endgroup'

    - id: gh-pr-review
      name: gh pr review
      if: ${{ steps.git-stat